AWSTemplateFormatVersion: 2010-09-09

Parameters: 
  StackEnv:
    Description: Stack Environment
    Type: String
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: t2.micro
  DBuser:
    Type: String
    Description: Database Username
    NoEcho: "true"
  DatabasePassword:
    Type: String
    Description: Database password
    NoEcho: "true"

Resources: 
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-myvpc
        - Key: Env
          Value: !Ref StackEnv
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-igw
        - Key: Env
          Value: !Ref StackEnv
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway
  #RouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-public-rtb
        - Key: Env
          Value: !Ref StackEnv
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-private-rtb
        - Key: Env
          Value: !Ref StackEnv
  #Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  #Subnet
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref myVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-publicsubnetA
        - Key: Env
          Value: !Ref StackEnv
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref myVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-publicsubnetC
        - Key: Env
          Value: !Ref StackEnv
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref myVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-privatesubnetA
        - Key: Env
          Value: !Ref StackEnv
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref myVPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-privatesubnetC
        - Key: Env
          Value: !Ref StackEnv
  # SubnetRouteTableAssociation
  PublicRouteTableAssociation1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTableAssociation1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateRouteTableAssociation1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable
  #EC2
  EC2A:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: ap-northeast-1a
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      Monitoring: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnetA
          GroupSet:
            - !Ref SecurityGroupEC2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-ec2a
        - Key: Env
          Value: !Ref StackEnv
      IamInstanceProfile: !Ref InstanceProfileEC2
  EC2C:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: ap-northeast-1c
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      Monitoring: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnetC
          GroupSet:
            - !Ref SecurityGroupEC2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-ec2c
        - Key: Env
          Value: !Ref StackEnv
      IamInstanceProfile: !Ref InstanceProfileEC2
  # SecurityGroup
  SecurityGroupEC2:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: EC2 Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupELB
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-ec2-sg
        - Key: Env
          Value: !Ref StackEnv
  SecurityGroupELB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-elb-sg
        - Key: Env
          Value: !Ref StackEnv
  SecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SecurityGroupEC2
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          DestinationSecurityGroupId: !Ref SecurityGroupEC2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-rds-sg
        - Key: Env
          Value: !Ref StackEnv
  #ELB
  ElasticLoadBalancer: 
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties: 
      Name: !Sub ${AWS::StackName}-${StackEnv}-elb
      Scheme: "internet-facing"
      LoadBalancerAttributes: 
        - Key: "deletion_protection.enabled"
          Value: false
        - Key: "idle_timeout.timeout_seconds"
          Value: 120
      SecurityGroups:
        - !Ref SecurityGroupELB
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-elb
        - Key: Env
          Value: !Ref StackEnv
  TargetGroup: 
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties: 
      VpcId: !Ref myVPC
      Name: !Sub ${AWS::StackName}-${StackEnv}-tg
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher: 
        HttpCode: 200
      Targets: 
        - Id: !Ref EC2A
          Port: 80
        - Id: !Ref EC2C
          Port: 80
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP
  #RDS
  rdsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      AvailabilityZone: ap-northeast-1a
      DBInstanceIdentifier: !Sub ${AWS::StackName}-${StackEnv}-rds
      DBSubnetGroupName: !Ref rdsDBSubnetGroup
      Engine: mysql
      EngineVersion: 8.0.20 
      MasterUsername: !Ref DBuser
      MasterUserPassword: !Ref DatabasePassword
      MultiAZ: false
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref SecurityGroupRDS
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-rds
        - Key: Env
          Value: !Ref StackEnv
  #DBSubnetGroup
  rdsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup from cfn
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-dbsubnetgroup
        - Key: Env
          Value: !Ref StackEnv
  #S3bucket
  s3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      BucketName: s3bucket-dev
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-s3bucket
        - Key: Env
          Value: !Ref StackEnv
      VersioningConfiguration:
        Status: Suspended
  #IAMRole
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Allows EC2 instances to call AWS services
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Path: /
      RoleName: !Sub ${AWS::StackName}-${StackEnv}-ec2-role
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${StackEnv}-ec2-role
        - Key: Env
          Value: !Ref StackEnv
  # IAM InstanceProfile
  InstanceProfileEC2:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-${StackEnv}-ec2-ip
      Path: /
      Roles:
        - !Ref EC2Role